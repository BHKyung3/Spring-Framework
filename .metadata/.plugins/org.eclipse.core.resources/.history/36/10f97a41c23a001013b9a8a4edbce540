package org.zerock.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.aspectj.apache.bcel.generic.ReturnaddressType;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.zerock.domain.AttachFileDTO;


import lombok.extern.log4j.Log4j;
import net.coobird.thumbnailator.Thumbnailator;
import oracle.jdbc.proxy.annotation.Post;
import org.springframework.http.MediaType;

@Controller
@Log4j
public class UploadControllerAjax {
	
	@GetMapping("/display")
	@ResponseBody		// byte A -> 01000001, a -> 01100001 // 아스티코드 변경하여 전달하겠다
	public ResponseEntity<byte[]> getFile(String fileName){
		File file = new File("c:\\upload\\" + fileName);
//		File file = new File("c:/upload/" + fileName); 아래와 동일한 표현방식
		
		ResponseEntity<byte[]> result = null;
		
		try {
			HttpHeaders header = new HttpHeaders();
										//MIME 타입 -> image/jpg, application/pdf
			header.add("Content-Type", Files.probeContentType(file.toPath()));
												// 본문(내용),							MIME 타입, 상태코드 -> 아스티코드로 받은걸 ByteArray 배열로 변환
			result = new ResponseEntity<byte[]>(FileCopyUtils.copyToByteArray(file), header, HttpStatus.OK);
		}catch(IOException e){
			e.printStackTrace();
		}
		
		return result; // MIME타입을 포함한 바이너리 데이터로 응답(상태코드 포함)
	}
	
	// Ajax테그로 이미지 저장하는 법
	@GetMapping("/uploadAjax")
	public void uploadAjax() {
		log.info("uploadAjax.....");	
	} // end Ajax테그로 이미지 저장하는 법
	
	// 년/월/일 폴더 생성(한 폴더에 너무 많은 파일이 생성되지 않도록)
	private String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		Date date = new Date();
		
		String str = sdf.format(date); //2025-05-26
		return str.replace("-", File.separator); // window기준으로 2025-05-26 -> 2025/05/26 변경
	} // end 년/월/일 폴더 생성
	// 이미지 파일인지 아닌지 판단하기
	private boolean checkImgType(File file) {
		
		try {
			
			String contentType = Files.probeContentType(file.toPath());
			
			return contentType.startsWith("image"); // 이미지로 시작하면 ture 값 반환
		} catch (IOException e) {
			e.printStackTrace();
		}

		return false;
	} // end 이미지 파일인지 아닌지 판단하기
	
	@GetMapping(value = "/download", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	@ResponseBody
	public ResponseEntity<Resource> downloadFile(String fileName){
		
		
		return null;
	}
	
	// 날짜별 폴더를 만들어 그 안에 저장
	@PostMapping(value = "/uploadAjaxAction", produces = MediaType.APPLICATION_JSON_VALUE) // 얘가 받음 json 타입 저장
	@ResponseBody
	public ResponseEntity<List<AttachFileDTO>> uploadAjaxPost(MultipartFile[] uploadFile, Model model) { // 상태값 포함 list 타입
		
		List<AttachFileDTO> list = new ArrayList<AttachFileDTO>();
		
		// 사진 저장할 경로
		String uploadFolder = "c:\\upload";
		String uploadFolderPath = getFolder(); // 2025\\05\\27
		
		File uploadPath = new File(uploadFolder, getFolder());
		
		// 폴더가 없을 경우 날짜폴더 자동 생성한다는 if 문
		if(uploadPath.exists() == false) {
			uploadPath.mkdirs(); // 복수니까 s 기재 필수
		} // end // 폴더가 없을 경우 날짜폴더 자동 생성한다는 if 문
		
		// 여러개의 파일을 업로드 했을 때 하나씩 불어오는 for 문
		for(MultipartFile multipartFile : uploadFile) {
//			log.info("----------");
//			log.info("Upload File Name : " + multipartFile.getOriginalFilename());
//			log.info("Upload File Size : " + multipartFile.getSize());
			
			AttachFileDTO attachFileDTO = new AttachFileDTO();
			
			String uploadFileName = multipartFile.getOriginalFilename();
			
			// 사진 중복 방지
			UUID uuid = UUID.randomUUID(); // 랜덤이니까 중복될 확률 낮아짐
			uploadFileName = uuid.toString() + "_" + uploadFileName;
			
			
			attachFileDTO.setUuid(uuid.toString());
			attachFileDTO.setFileName(multipartFile.getOriginalFilename()); // 원본파일명
			attachFileDTO.setUploadPath(uploadFolderPath);
			
			try {
				// 경로에 저장 시켜라
				File savedFile = new File(uploadPath, uploadFileName);
	            multipartFile.transferTo(savedFile);
	            
	            // 섬네일을 만들지 안만들지 보는 if문
	            if(checkImgType(savedFile)) { // checkImgType(savedFile) : 파일이 이미지인지 아닌지 검사하는 함수
	            	
	            	attachFileDTO.setImage(true);
	            	
	            	// 썸네일 파일 경로 만들기
	            	FileOutputStream thumbnail = new FileOutputStream(
	            			new File(uploadPath, "s_" + uploadFileName)
	            			); // end // 썸네일 파일 경로 만들기
	            	// 썸네일 만들기 // Thumbnailator는 썸네일 만들기 전용 라이브러리
	            	// 원본 이미지 파일의 InputStream을 읽어 100*100 크기의 썸네일 만들어서 thumbnail에 저장
	            	Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 100, 100);
	            	thumbnail.close(); // 스트림 닫기
	            } // end 섬네일을 만들지 만들지 않을지 if문
	            list.add(attachFileDTO); // list에 추가
	            
	        } catch (IllegalStateException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } 
	    } // end 여러개의 파일을 업로드 했을 때 하나씩 불어오는 for 문
	
	return new ResponseEntity<>(list, HttpStatus.OK);
	}
		// 한 폴더에 전부 저장
		@PostMapping("/uploadAjaxAction_old")
		@ResponseBody
		public String uploadAjaxAction_old(MultipartFile[] uploadFile, Model model) {
			
			// 사진 저장할 경로
			String uploadFolder = "c:\\upload";

			for(MultipartFile multipartFile : uploadFile) {
				log.info("----------");
				log.info("Upload File Name : " + multipartFile.getOriginalFilename());
				log.info("Upload File Size : " + multipartFile.getSize());
				
				// 설정 경로에 이미지 저장 => c:\\upload\\판매상품.JPG..으로 저장됨
				File saveFile_old = new File(uploadFolder, multipartFile.getOriginalFilename());
				
				try {
		            multipartFile.transferTo(saveFile_old);
		        } catch (IllegalStateException e) {
		            e.printStackTrace();
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		    }
		
		return "success";	
		}
}


