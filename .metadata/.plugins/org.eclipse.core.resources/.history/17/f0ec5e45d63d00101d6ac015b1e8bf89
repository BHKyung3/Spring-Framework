console.log("Reply Module.....");

// 즉시 실행 함수 형태로 만든 댓글 처리 전용 모듈 // 댓글 전용 서비스 객체
let replyService = (function(){

	// 댓글 등록 기능
    function add(Reply, callback, error){
        console.log("reply.....");

        $.ajax({
            type: 'post',
            url: '/replies/new',
            data: JSON.stringify(Reply), // reply(js 객체) -> json으로 변환
            contentType: "application/json; charset=utf-8;",

            success: function(result, status, xhr){
                if(callback){
                    callback(result);
                }
            },

            error: function(xhr, status, er){
                if(error){
                    error(er);
                }
            }
        });
    } // end add

	// 특정 게시글 번호에 해당하는 댓글 목록 조회 -> 전체 데이터 가지고 있음
    function getList(param, callback, error){
        let bno = param.bno;

        let page = param.page || 1;

        $.ajax({
            type: 'get',
            url: '/replies/pages/' + bno + "/" + page,

            success: function(result, status, xhr){
            	
                if(callback){
                    callback(result.replyCnt, result.list); // 넘겨줄 값 2개
                }
            },

            error: function(xhr, status, er){
                if(error){
                    error(er);
                }
            }

        })
    }   // end getList

    // 특정 댓글 삭제
    function remove(rno, replyer, callback, error){

         $.ajax({
            type: 'delete',
            url: '/replies/' + rno,

            success: function(deleteResult, status, xhr){
                if(callback){
                    callback(deleteResult);
                }
            },

            error: function(xhr, status, er){
                if(error){
                    error(er);
                }
            }

         })

    }; // end remove

    // 특정 댓글 1건 조회(get)
    function get(rno, callback, error){

        $.ajax({
            type: 'get',
            url: '/replies/' + rno,

            success: function(result, status, xhr){
                if(callback){ // 전달 받은 값으로 함수호출
                    callback(result);
                }
            },

            error: function(xhr, status, er){
                if(error){
                    error(er);
                }
            }

        });

    } // end get

    // 댓글 수정 요청(put)
    function update(reply, callback, error){

        $.ajax({
            type: 'put',
            url: '/replies/' + reply.rno,
            data: JSON.stringify(reply),
            contentType: "application/json; charset=utf-8;",


            success: function(result, status, xhr){
                if(callback){ // 전달 받은 값으로 함수호출
                    callback(result);
                }
            },

            error: function(xhr, status, er){
                if(error){
                    error(er);
                }
            }

        });

    } // end update

    // 댓글 작성 시간 표기
   function displayTime(timeValue){

        let today = new Date();

        let dateObj = new Date(timeValue);
        dateObj.setHours(dateObj.getHours() + 9); //한국시간표기 코드
        let str = "";
        let gap = today.getTime() - dateObj.getTime();

        if(gap < (1000*60*60*24)){
            let hh = dateObj.getHours(); 
            let mi = dateObj.getMinutes();
            let ss = dateObj.getSeconds();

            return [ (hh > 9 ? '': '0') + hh, ":" , 
                     (mi > 9 ? '': '0') + mi, ":",
                     (ss > 9 ? '': '0') + ss 
                   ].join('');
        }else{
            let yy = dateObj.getFullYear();
            let mm = dateObj.getMonth()+1;
            let dd = dateObj.getDate();

            return [
                yy, '/', (mm>9? '' : '0') + mm, '/' ,(dd>9? '' : '0')+dd
            ].join('');
        }
    } //end displayTime

    return {
        add : add,
        getList : getList,
        remove : remove,
        get : get,
        update : update,
        displayTime : displayTime
    };
})();