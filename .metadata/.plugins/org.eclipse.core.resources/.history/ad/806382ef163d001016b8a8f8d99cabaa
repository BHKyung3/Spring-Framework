package org.zerock.controller;

import java.util.List;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.domain.BoardVO;
import org.zerock.domain.Criterial;
import org.zerock.domain.PageDTO;
import org.zerock.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/board")
@RequiredArgsConstructor // final이나 @NonNull이 붙은 필드만 자동으로 생성자를 만들어주는 어노테이션, 의존성 주입(DI) 을 생성자 방식
@Log4j
public class BoardController {
	
	private final BoardService service; // 외부 접근 불가한 변경 불가한 객체로 service 변수, BoardService 클래스 이름
	// 데이터 전체 목록(페이징 처리)
	@GetMapping("/list")
	public void list(Criterial cri, Model model) { // 클라이언트(브라우저)가 요청한 페이지 정보를 Criteria에 담아서 가져 그에 맞는 게시글 목록을 service.getList(cri)로 받아온 뒤 그 결과를 model에 담아서 뷰(JSP나 타임리프 등)에 넘기는 구조
		log.info("list....." +cri );
		
		List<BoardVO> list = service.getList(cri);

		model.addAttribute("list", list);
		
		// cri, ??? -> 총 DB 데이터 개수
		model.addAttribute("pageMaker", new PageDTO(cri, service.getTotal(cri)));
	}
	
	// 데이터 등록
	@GetMapping("/register")  //get으로 요청이 들어오면 register.jsp 화면을 보여줘라
	@PreAuthorize("isAuthenticated()")
	public void register() {
	   }
	
	@PostMapping("/register")
	@PreAuthorize("isAuthenticated()")
	   public String register(BoardVO board, RedirectAttributes rttr) { // 사용자가 입력한 게시글 정보(title, content, writer 등)를 자동으로 BoardVO 객체에 바인딩
	      log.info("register.....");
	      service.register(board); //게시글 등록 로직 실행 service는 서비스 계층이고, 그 안의 register()는 DB에 데이터를 insert하는 메서드 / DB에 새 글을 등록하는 핵심 작업
	      rttr.addFlashAttribute("result", board.getBno()); // 리다이렉트할 때 잠깐 데이터를 전달하는 코드
	      
	      return "redirect:/board/list";
	}
	// 데이터 단건 조회
	// Criterial cri 단건 조회 후 리스트 이동 화면 변화 없이 하기 위함(6페이지에서 조회 했는데 리스트는 1페이지로 돌아가면 안되니까)
	@GetMapping({"/get", "/modify"})
	public void get(@RequestParam("bno") Long bno, Criterial cri, Model model) {
		log.info("get.....");
		
		model.addAttribute("board", service.get(bno));
		model.addAttribute("cri", cri); 
	}
	// 데이터 삭제 // 반환타입 있어 void아닌 String 기재
	@PreAuthorize("principal.username == #writer")
	@PostMapping("/remove")
	public String remove(Long bno, @ModelAttribute("cri") Criterial cri, RedirectAttributes rttr) {
		log.info("remove.....");
		
		if(service.remove(bno)) {
			rttr.addFlashAttribute("result", "삭제 되었습니다.");
		}
		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount", cri.getAmount());
		rttr.addAttribute("keyword", cri.getKeyword());
		rttr.addAttribute("type", cri.getType());
		
		return "redirect:/board/list";
	//	return "/board/list"; >> 화면 전환을 하지 않을 경우 동일한 내용이 새로고침할 때마다 추가된다
	}
	
	// 데이터 수정
	// @ModelAttribute("cri") 기재 또는 Criterial cri + model.addAttribute("cri", cri); 두가지로 표현 가능
	@PostMapping("/modify")
	public String modify(BoardVO board, @ModelAttribute("cri") Criterial cri, RedirectAttributes rttr) {
		log.info("modify.....");
		
		if(service.modify(board)) {
			rttr.addFlashAttribute("result", "수정 되었습니다.");
		}
		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount", cri.getAmount());
		rttr.addAttribute("keyword", cri.getKeyword());
		rttr.addAttribute("type", cri.getType());
		
		return "redirect:/board/list";
	}

}
